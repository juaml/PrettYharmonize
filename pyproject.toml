[build-system]
requires = [
  "setuptools >= 61.0.0",
  "wheel",
  "setuptools_scm[toml] >= 6.2"
]
build-backend = "setuptools.build_meta"

[project]
name = "prettyharmonize"
description = "Pretend Target Y Harmonization"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE.md"}
authors = [
    {email = "f.raimondo@fz-juelich.de"},
    {name = "Fede Raimondo"}
]
keywords = [
    "neuroimaging",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Natural Language :: English",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
dependencies = [
    "numpy>=1.22,<2.0",
    "julearn>=0.3.0",
    "pandas>=2.0.0,<2.2",
    "neuroHarmonize>=2.1.0,<=2.3",
    "statsmodels>=0.13.2,<0.15",
]
dynamic = ["version"]

[project.urls]
homepage = "https://github.com/juaml/PrettYharmonize"
documentation = "https://github.com/juaml/PrettYharmonize"
repository = "https://github.com/juaml/PrettYharmonize"

[project.optional-dependencies]
dev = ["pytest"]
docs = [
    "seaborn>=0.11.2,<0.14",
    "Sphinx>=5.0.2,<5.1",
    "sphinx-gallery>=0.10.1,<0.11",
    "sphinx-rtd-theme>=1.0.0,<1.1",
    "sphinx-multiversion>=0.2.4,<0.3",
    "numpydoc>=1.4.0,<1.5",
    "julearn>=0.3.0"
]

################
# Tool configs #
################

[tool.setuptools]
packages = ["prettyharmonize"]

[tool.setuptools_scm]
version_scheme = "python-simplified-semver"
local_scheme = "no-local-version"
write_to = "prettyharmonize/_version.py"

[tool.black]
line-length = 79
target-version = ["py38"]


[tool.ruff]
line-length = 79
extend-exclude = [
    "__init__.py",
    "docs",
    "examples",
    "external",
]

[tool.ruff.lint]
select = [
    # flake8-bugbear
    "B",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # mccabe
    "C90",
    # pydocstyle
    "D",
    # pycodestyle errors
    "E",
    # pyflakes
    "F",
    # isort
    "I",
    # pep8-naming
    "N",
    # pygrep-hooks
    "PGH",
    # ruff
    "RUF",
    # flake8-type-checking
    "TCH",
    # pyupgrade
    "UP",
    # pycodestyle warnings
    "W",
    # flake8-2020
    "YTT",
]
extend-ignore = [
    # Use of `functools.lru_cache` or `functools.cache` on methods can lead to
    # memory leaks. The cache may retain instance references, preventing garbage
    # collection.
    "B019",
    # abstract class with no abstract methods
    "B024",
    "D202",
    # missing docstring in __init__, incompatible with numpydoc
    "D107",
    # use r""" if any backslashes in a docstring
    "D301",
    # class names should use CapWords convention
    "N801",
    # function name should be lowercase
    "N802",
    # variable in function should be lowercase
    "N806",
    # use specific rule codes when ignoring type issues
    "PGH003",
]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["julearn"]
known-third-party =[
    "numpy",
    "pandas",
    "sklearn",
    "statsmodels",
    "bokeh",
    "panel",
    "param",
    "deslib",
    "pytest",
]

[tool.ruff.lint.mccabe]
max-complexity = 20
